"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { FileText, Calendar, Download, Sparkles, Clock, TrendingUp, ExternalLink, Loader2 } from 'lucide-react';

interface ReportType {
  id: string;
  name: string;
  description: string;
  duration: string;
  icon: string;
}

interface SavedReport {
  id: string;
  name: string;
  reportType: string;
  duration: string;
  generatedAt: string;
  logCount: number;
  startDate?: string;
  endDate?: string;
}

interface GeneratedReport {
  id: string;
  reportType: string;
  duration: string;
  generatedAt: string;
  logCount: number;
  summary: string;
  startDate?: string;
  endDate?: string;
  logs?: Array<{
    id: string;
    title: string;
    description: string;
    status: string;
    priority: string;
    createdAt: string;
  }>;
}

interface CustomDates {
  startDate: string;
  endDate: string;
}

const Reports: React.FC = () => {
  const router = useRouter();
  const [reportTypes, setReportTypes] = useState<ReportType[] | null>(null);
  const [savedReports, setSavedReports] = useState<SavedReport[]>([]);
  const [selectedReport, setSelectedReport] = useState<ReportType | null>(null);
  const [customDates, setCustomDates] = useState<CustomDates>({
    startDate: '',
    endDate: ''
  });
  const [loading, setLoading] = useState(false);
  const [generatedReport, setGeneratedReport] = useState<GeneratedReport | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'generate' | 'saved'>('generate');
  const [isLoadingReports, setIsLoadingReports] = useState(true);

  useEffect(() => {
    fetchReportTypes();
  }, []);

  const fetchReportTypes = async () => {
    try {
      setIsLoadingReports(true);
      const response = await fetch('http://localhost:3001/api/reports');
      if (!response.ok) {
        throw new Error('Failed to fetch report types');
      }
      const data = await response.json();
      setReportTypes(data.reportTypes);
      setSavedReports(data.savedReports);
    } catch (err) {
      console.error('Error fetching report types:', err);
      setError('Failed to load report types');
    } finally {
      setIsLoadingReports(false);
    }
  };

  const generateReport = async () => {
    if (!selectedReport) {
      setError('Please select a report type');
      return;
    }

    try {
      setLoading(true);
      setError(null);

      const reportData = {
        duration: selectedReport.duration,
        reportType: selectedReport.id,
        ...(selectedReport.duration === 'custom' && {
          startDate: customDates.startDate,
          endDate: customDates.endDate
        })
      };

      const response = await fetch('http://localhost:3001/api/reports/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(reportData)
      });

      if (!response.ok) {
        throw new Error('Failed to generate report');
      }

      const report = await response.json();
      setGeneratedReport(report);
      
      // Refresh the saved reports list to update the count
      await fetchReportTypes();
    } catch (err) {
      console.error('Error generating report:', err);
      setError('Failed to generate report. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const downloadReport = () => {
    if (!generatedReport) return;

    const reportText = `
CONSTRUCTION SITE REPORT
${'='.repeat(50)}

Report Type: ${generatedReport.reportType}
Duration: ${generatedReport.duration}
Generated: ${new Date(generatedReport.generatedAt).toISOString().split('T')[0]}
Log Count: ${generatedReport.logCount}

${generatedReport.startDate && generatedReport.endDate ? 
  `Date Range: ${generatedReport.startDate} to ${generatedReport.endDate}` : ''}

SUMMARY
${'-'.repeat(20)}
${generatedReport.summary}

DETAILED LOGS
${'-'.repeat(20)}
${generatedReport.logs?.map((log: any) => `
${log.title}
${'-'.repeat(30)}
Status: ${log.status}
Priority: ${log.priority}
Date: ${new Date(log.createdAt).toLocaleDateString()}
Description: ${log.description}
`).join('\n') || 'No logs found'}

${'='.repeat(50)}
Generated by Construction Log Management System
`;

    const blob = new Blob([reportText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `construction-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  const handleLogClick = (logId: string) => {
    router.push(`/logs/${logId}`);
  };

  const handleSavedReportClick = (report: SavedReport) => {
    setGeneratedReport({
      id: report.id,
      reportType: report.reportType,
      duration: report.duration,
      generatedAt: report.generatedAt,
      logCount: report.logCount,
      summary: 'Report summary will be loaded here...',
      startDate: report.startDate,
      endDate: report.endDate
    });
    setActiveTab('generate');
  };

  const handleDeleteReport = async (reportId: string) => {
    const isConfirmed = window.confirm('Are you sure you want to delete this report?');
    if (!isConfirmed) return;

    try {
      const response = await fetch(`http://localhost:3001/api/reports/${reportId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Failed to delete report');
      }

      // Remove from saved reports
      setSavedReports(prev => prev.filter(report => report.id !== reportId));
    } catch (err) {
      console.error('Error deleting report:', err);
      alert('Failed to delete report. Please try again.');
    }
  };

  if (isLoadingReports) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="w-8 h-8 animate-spin text-blue-600" />
          <span className="ml-2 text-gray-600">Loading reports...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-900">Reports & Analytics</h1>
          <div className="flex items-center space-x-2">
            <TrendingUp className="w-6 h-6 text-blue-600" />
            <span className="text-sm text-gray-600">Construction Insights</span>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg">
          <button
            onClick={() => setActiveTab('generate')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'generate'
                ? 'bg-white text-blue-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Generate Report
          </button>
          <button
            onClick={() => setActiveTab('saved')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'saved'
                ? 'bg-white text-blue-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Saved Reports ({savedReports.length})
          </button>
        </div>

        {activeTab === 'generate' ? (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Report Types */}
            <div className="lg:col-span-1">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <FileText className="w-5 h-5 mr-2" />
                    Report Types
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {reportTypes?.map((reportType) => (
                    <div
                      key={reportType.id}
                      onClick={() => setSelectedReport(reportType)}
                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                        selectedReport?.id === reportType.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="font-medium text-gray-900">{reportType.name}</h3>
                          <p className="text-sm text-gray-600">{reportType.description}</p>
                        </div>
                        <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          {reportType.duration}
                        </span>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>

              {/* Custom Date Range */}
              {selectedReport?.duration === 'custom' && (
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Calendar className="w-5 h-5 mr-2" />
                      Date Range
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Start Date
                      </label>
                      <input
                        type="date"
                        value={customDates.startDate}
                        onChange={(e) => setCustomDates(prev => ({ ...prev, startDate: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        End Date
                      </label>
                      <input
                        type="date"
                        value={customDates.endDate}
                        onChange={(e) => setCustomDates(prev => ({ ...prev, endDate: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Generate Button */}
              <div className="mt-6">
                <Button
                  onClick={generateReport}
                  disabled={loading || !selectedReport}
                  className="w-full"
                >
                  {loading ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Sparkles className="w-4 h-4 mr-2" />
                  )}
                  Generate Report
                </Button>
              </div>
            </div>

            {/* Generated Report */}
            <div className="lg:col-span-2">
              {error && (
                <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-red-700">{error}</p>
                </div>
              )}

              {generatedReport ? (
                <Card>
                  <CardHeader>
                    <div className="flex justify-between items-center">
                      <CardTitle>Generated Report</CardTitle>
                      <Button onClick={downloadReport} variant="outline" size="sm">
                        <Download className="w-4 h-4 mr-2" />
                        Download
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                          <div className="text-2xl font-bold text-blue-600">{generatedReport.logCount}</div>
                          <div className="text-sm text-gray-600">Total Logs</div>
                        </div>
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                          <div className="text-sm font-medium text-gray-900">{generatedReport.reportType}</div>
                          <div className="text-sm text-gray-600">Report Type</div>
                        </div>
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                          <div className="text-sm font-medium text-gray-900">{generatedReport.duration}</div>
                          <div className="text-sm text-gray-600">Duration</div>
                        </div>
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                          <div className="text-sm font-medium text-gray-900">
                            {formatDate(generatedReport.generatedAt)}
                          </div>
                          <div className="text-sm text-gray-600">Generated</div>
                        </div>
                      </div>

                      <div>
                        <h3 className="font-semibold text-gray-900 mb-2">Summary</h3>
                        <p className="text-gray-700 whitespace-pre-wrap">{generatedReport.summary}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <Card>
                  <CardContent className="text-center py-12">
                    <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No Report Generated</h3>
                    <p className="text-gray-600">
                      Select a report type and click "Generate Report" to create your first report.
                    </p>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        ) : (
          /* Saved Reports */
          <div>
            {savedReports.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {savedReports.map((report) => (
                  <Card key={report.id} className="cursor-pointer hover:shadow-lg transition-shadow">
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-semibold text-gray-900">{report.name}</h3>
                          <p className="text-sm text-gray-600">{report.reportType}</p>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteReport(report.id);
                          }}
                        >
                          ×
                        </Button>
                      </div>
                      
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Duration:</span>
                          <span className="font-medium">{report.duration}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Logs:</span>
                          <span className="font-medium">{report.logCount}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Generated:</span>
                          <span className="font-medium">{formatDate(report.generatedAt)}</span>
                        </div>
                      </div>

                      <div className="mt-4 flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleSavedReportClick(report)}
                          className="flex-1"
                        >
                          <ExternalLink className="w-3 h-3 mr-1" />
                          View
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="text-center py-12">
                  <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Saved Reports</h3>
                  <p className="text-gray-600">
                    Generate your first report to see it here.
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Reports; 